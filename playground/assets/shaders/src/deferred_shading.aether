[Vertex]
#version 450 core
layout (location = 0) in vec2 attribPosition;
layout (location = 5) in vec2 attribTexCoord;

out VS_OUT {
	vec2 texCoord;
} frag;

void main() {
	frag.texCoord = attribTexCoord;

	gl_Position = vec4(attribPosition, 0.0, 1.0);
}

[Fragment]
#version 450 core

in VS_OUT {
    vec2 texCoord;
} frag;

out vec4 finalColor;

@include LightingContext

@include computeShadowValue

vec3 computeDirectionalLighting( Light light, vec3 p, vec3 n, vec3 a );
vec3 computePointLighting( Light light, vec3 p, vec3 n, vec3 a );

void main() {
    vec3 position = texture(bufferedPosition, frag.texCoord).rgb;
    vec3 normal = texture(bufferedNormal, frag.texCoord).rgb;
    vec3 albedo = texture(bufferedAlbedo, frag.texCoord).rgb;

    vec3 ambient = ambient.xyz * ambient.a;
    vec3 result = ambient;
    
    for (int i = 0; i < lightCount; i += 1) {
        Light light = lights[i];

        if (light.mode == DIRECTIONAL_LIGHT) {
            result += computeDirectionalLighting(light, position, normal, albedo);
        } else if (light.mode == POINT_LIGHT) {
            result += computePointLighting(light, position, normal, albedo);
        }
    }
    finalColor = vec4(result, 1.0);
}

vec3 computeDirectionalLighting( Light light, vec3 p, vec3 n, vec3 a ) {
    vec3 lightDir = normalize(light.position);
    float diffuseContribution = max(dot(lightDir, n), 0.0);
    vec3 diffuse = diffuseContribution * light.color;

    vec3 viewDir = normalize(viewPosition - p);
    vec3 reflectDir = reflect(-lightDir, n);
    float specContribution = max(dot(viewDir, reflectDir), 0.0);
    vec3 specular = 0.5 * (specContribution * light.color);

    return (diffuse + specular);
}

vec3 computePointLighting( Light light, vec3 p, vec3 n, vec3 a ) {
    vec3 lightDir = normalize(light.position - p);
    float diffuseContribution = max(dot(lightDir, n), 0.0);
    vec3 diffuse = diffuseContribution * light.color;

    vec3 viewDir = normalize(viewPosition - p);
    vec3 reflectDir = reflect(-lightDir, n);
    float specContribution = max(dot(viewDir, reflectDir), 0.0);
    vec3 specular = 0.5 * (specContribution * light.color);

    float distance = length(light.position - p);
    float attenuation = 1.0 / (1.0 + light.linear * distance + light.quadratic * (pow(distance)));
    return (diffuse * attenuation) + (specular * attenuation);
}